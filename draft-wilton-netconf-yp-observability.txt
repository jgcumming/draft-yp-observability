



Network Configuration                                          R. Wilton
Internet-Draft                                             Cisco Systems
Intended status: Informational                           21 October 2024
Expires: 24 April 2025


         YANG Push Operational Data Observability Enhancements
              draft-wilton-netconf-yp-observability-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://rgwilton.github.io/draft-yp-observability/draft-wilton-
   netconf-yp-observability.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-wilton-
   netconf-yp-observability/.

   Discussion of this document takes place on the Network Configuration
   Working Group mailing list (mailto:netconf@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/netconf/.
   Subscribe at https://www.ietf.org/mailman/listinfo/netconf/.

   Source for this draft and an issue tracker can be found at
   https://github.com/rgwilton/draft-yp-observability.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 24 April 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  YANG Push enhancements
     2.1.  New encoding format
     2.2.  Combined periodic and on-change subscription
     2.3.  Open Issues & Other Potential Enhancements/Changes
     2.4.  YANG Extensions Data Model
   3.  Conventions and Definitions
   4.  Security Considerations
   5.  IANA Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   [I-D.ietf-nmop-yang-message-broker-integration] describes an
   architecture for how YANG Push [RFC8641] can be integrated
   effectively with message brokers (e.g., Apache Kafka), that is part
   of a wider architecture for a _Network Anomaly Detection Framework_,
   specified in [I-D.ietf-nmop-network-anomaly-architecture].

   YANG-Push is a key part of these architectures, but through
   experience of implementing YANG Push specifically for the use cases
   described in the above architecture documents, it became clear that
   there are aspects of YANG Push that are not optimal for these use
   cases, particular as they relate to operational data, both neither
   producer or consumer.

   For the consumer of the telemetry data, there is a requirement to
   associate a schema with the provided data.  It is much more helpful
   for the schema to be associated with the individual messages rather
   than at the root of the operational datastore.  As such, it is
   helpful for the encoded instance data to be rooted at subscription
   path rather than at the root of the operational datastore.

   The YANG abstraction of a single datastore of related consistent data
   works well for configuration that has a strong requirement to be self
   consistent, and that is always updated in a transactional way.  But
   for producers of telemetry data, the YANG abstraction of a single
   operational datastore is not really possible for non trivial devices.
   Some systems may store the operational data in a single logical
   database, it is less likely that data can always be updated in a
   transactional way, and often for memory efficiency reasons such a
   database does not store individual leaves, but instead semi-
   consistent records of data.  For other systems, the operational
   information may be distributed across multiple internal nodes (e.g.,
   linecards), and potentially many different daemons within those
   nodes.  Such systems generally cannot exhibit full consistency of the
   operational data, only offering an eventually consistent view.  In
   reality, many devices will manage their operational data as a
   combination of some data being stored in a central operational
   datastore, and other, higher scale, and more frequently changing data
   (e.g., statistics or FIB information) being stored elsewhere in a
   more memory efficient and performant way.

   Hence, this document defines some minor extensions to YANG Push that
   are designed to make YANG Push work better both for producers and
   consumers of YANG telemetry data.

2.  YANG Push enhancements

   This document currently:

   *  Defines a new yang push encoding format that can be used for both
      on-change and periodic subscriptions that reports the data from
      the subscription filter point.

   *  Defines a combined period and on-change subscription that reports
      events both on a periodic cadence and also if changes to the date
      have occurred.

2.1.  New encoding format

   // Should consider scope of XPath, i.e., what is allowed. // Could we
   consider use JsonPath instead?
   https://datatracker.ietf.org/doc/html/rfc9535

2.2.  Combined periodic and on-change subscription

2.3.  Open Issues & Other Potential Enhancements/Changes

   This section lists some other potential issues and enhancements that
   should be considered as part of this work.  If there is working group
   interest in progressing this work, then the issues in this section
   could potentially be better managed as github issues.

   1.  Should we consider a version of the JSON encoding that excludes
       module prefixes (either everywhere, or perhaps only include the
       top module prefix).  The reasoning for considering this is to
       potentially better align the JSON data with how the schema data
       may be modeled in other data systems (e.g., Kafka).  Obviously,
       this requires that there be no duplicate data node names in
       different module namespaces.

   2.  Do we make use of the new notification-envelope format as the
       mandatory and only required notification format for these new
       forms of subscriptions.  I.e., reducing complexity by removing
       unnecessary options?

   3.  Document how sub-subscriptions can be used to split up a higher
       level subscription into smaller more efficient subscriptions for
       the device (that can be handled concurrently).

   4.  The document's current focus is on configured subscriptions,
       aligned to the proposed initial deployment requirements, but the
       solution should probably be extended to support dynamic
       subscriptions, presuming that it is not hard to do so.

   5.  Some of the YANG Push behavior is more complex and expensive to
       implement (e.g., the SHOULD requirement to suggest suitable
       alternative subscription parameters if a subscription is
       rejected, subscription dependencies).  Should this document
       update that RFC 8639 or RFC 8641 to indicate that those
       requirements do not apply to these new extended subscriptions?
       The goal of this work should be to specify the minimal required
       functionality to meet the requirements.

   6.  What document format should this work take?  The currently
       proposed approach is to add extra extensions to YANG Push to
       cover the required functionality.  An alternative approach could
       be to write a RFC 8641-bis, although it is unclear exactly what
       format that should take.

   7.  Currently the encoding and transport parameters are per
       subscription, but it may make more sense for these to be per
       receiver definition.  I.e., if you want to use different
       transports and encodings to the same receiver this should still
       be possible, but would require a second receiver to be defined
       with the same destination IP address, but a different name.
       Currently, the newly proposed encoding format is configured per
       receiver, but alternatively it could be configured per
       subscription (that would better mirror the existing per-
       subscription transport and encoding configuration leaves).

2.4.  YANG Extensions Data Model

   <CODE BEGINS> file "ietf-yp-ext@2024-10-18.yang"
   module ietf-yp-ext {
     yang-version 1.1;
     namespace "urn:ietf:params:xml:ns:yang:ietf-yp-ext";
     prefix yp-ext;

     import ietf-yang-types {
       prefix yang;
       reference
         "RFC 6991: Common YANG Data Types";
     }
     import ietf-subscribed-notifications {
       prefix sn;
       reference
         "RFC 8639: Subscription to YANG Notifications";
     }
     import ietf-yang-push {
       prefix yp;
       reference
         "RFC 8641: Subscription to YANG Datastores";
     }

     organization
       "IETF NETCONF (Network Configuration) Working Group";
     contact
       "WG Web:  <https:/datatracker.ietf.org/wg/netconf/>
        WG List: <mailto:netconf@ietf.org>

        Author:  Robert Wilton
                 <mailto:rwilton@cisco.com>";

     description
       "This module contains YANG specifications for YANG-Push extensions.

        The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
        NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
        'MAY', and 'OPTIONAL' in this document are to be interpreted as
        described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
        they appear in all capitals, as shown here.

        Copyright (c) 2024 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject to
        the license terms contained in, the Simplified BSD License set
        forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (https://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC 8641; see the
        RFC itself for full legal notices.";

     revision 2024-10-18 {
       description
         "Initial revision.";
       reference
         "XXX: YANG Push Observability Extensions ";
     }

     /*
      * FEATURES
      */

     /*
      * IDENTITIES
      */

     /*
      * TYPE DEFINITIONS
      */

     /*
      * GROUP DEFINITIONS
      */

     grouping periodic-and-on-change {
       description
         "This grouping describes the datastore-specific subscription
          that represents a combined periodic and on-change subscription.";
       container periodic-and-on-change {
         presence
           "A combined periodic and on-change subscription";
         description
           "The publish notifies the receiver on the specific
             periodic, and also whenever any of the data changes.";
         leaf period {
           type yp:centiseconds;
           mandatory true;
           description
             "Duration of time that should occur between periodic
             push updates, in units of 0.01 seconds.";
         }
         leaf anchor-time {
           type yang:date-and-time;
           description
             "Designates a timestamp before or after which a series
             of periodic push updates are determined.  The next
             update will take place at a point in time that is a
             multiple of a period from the 'anchor-time'.
             For example, for an 'anchor-time' that is set for the
             top of a particular minute and a period interval of a
             minute, updates will be sent at the top of every
             minute that this subscription is active.";
         }
         leaf dampening-period {
           type yp:centiseconds;
           default "0";
           description
             "Specifies the minimum interval between the assembly of
               successive update records for a single receiver of a
               subscription.  Whenever subscribed objects change and
               a dampening-period interval (which may be zero) has
               elapsed since the previous update record creation for
               a receiver, any subscribed objects and properties
               that have changed since the previous update record
               will have their current values marshalled and placed
               in a new update record.";
         }
         leaf sync-on-start {
           type boolean;
           default "true";
           description
             "When this object is set to 'false', (1) it restricts an
             on-change subscription from sending 'push-update'
             notifications and (2) pushing a full selection per the
             terms of the selection filter MUST NOT be done for
             this subscription.  Only updates about changes
             (i.e., only 'push-change-update' notifications)
             are sent.  When set to 'true' (the default behavior),
             in order to facilitate a receiver's synchronization,
             a full update is sent, via a 'push-update' notification,
             when the subscription starts.  After that,
             'push-change-update' notifications are exclusively sent,
             unless the publisher chooses to resync the subscription
             via a new 'push-update' notification.";
         }
         leaf-list excluded-change {
           type yp:change-type;
           description
             "Used to restrict which changes trigger an update.  For
              example, if a 'replace' operation is excluded, only the
              creation and deletion of objects are reported.

              TODO - Do we want this leaf?";
         }
       }
     }

     grouping common-notification-format {
       description
         "This grouping describes the common-notif-format leaf that
          controls whether the new common message format is used for periodic
          and on-change notifications.";
       leaf common-notification-format {
         type boolean;
         default "false";
         description
           "This leaf controls whether the new common message format
            is used for periodic and on-change notifications.  If set
            to 'true', the new common message format is used.  If set
            to 'false', the old message format is used.

            TODO - Should we support hierarchical configuration here
            (e.g., also add the leaf to the subscription container,
            or it could be added to the receiver instead)?";
       }
     }

     /*
      * RPCs
      */

     /*
      * NOTIFICATIONS
      */

     notification update {
       description
         "This notification contains a push update that in turn contains
          data subscribed to via a subscription.  In the case of a
          periodic subscription, this notification is sent for periodic
          updates.  It can also be used for synchronization updates of
          an on-change subscription.  This notification shall only be
          sent to receivers of a subscription.  It does not constitute
          a general-purpose notification that would be subscribable as
          part of the NETCONF event stream by any receiver.";
       leaf id {
         type sn:subscription-id;
         description
           "This references the subscription that drove the
            notification to be sent.";
       }

       leaf subscription-path {
         type yang:xpath1.0;
         description
           "The subscription path indicates the schema path from the root of the
            schema tree to the node, for which the updated state is being
            notified, or a notification that is has been deleted.

            TODO - Make this an instance data ref";
       }

       leaf target-path {
         type string;
       }

       leaf snapshot-type {
         type enumeration {
           enum "periodic" {
             description
               "The update message is due to a periodic update.";
           }
           enum "on-change-update" {
             description
               "The update message is due to an on-change update.  This
                means that one or more fields have changed under the
                snapshot path.

                TODO - Split this into a on-change-delete msg?";
           }
           enum "on-change-delete" {
             description
               "The update message is due to an on-change event where
                the data node at the target path has been delete.";
           }
           enum "resync" {
             description
               "This indicates that the update is to resynchronize the
                state, e.g., after a subscription started notification.

                Ideally, the resync message SHOULD be the first
                notification sent when a subscription has started, but
                it is not gauranteed or required to be the first
                (e.g., if an on-change event occurs).

                These messages can be used to ensure that all state
                has been sent to the client, and can be used to purge
                stale data.

                TODO - In the distributed notification case, need a
                notification to indicate that all child subscriptions
                have been sent.";
           }
         }
         description
           "This indicates the type of notification message that is being sent.";
       }

       // Could add observation time here.
       leaf observation-time {
         type yang:date-and-time;
         description
           "The time that the update was observed by the publisher.";
       }

       anydata datastore-snapshot {
         description
           "This contains the updated data.  It constitutes a snapshot
           at the time of update of the set of data that has been
           subscribed to.  The snapshot corresponds to the same
           snapshot that would be returned in a corresponding 'get'
           operation with the same selection filter parameters
           applied.

           Used for snapshot types except for 'on-change-delete'.";
       }

       leaf incomplete {
         type empty;
         description
           "This is a flag that indicates that not all datastore
           nodes subscribed to are included with this update.  Receivers
           of this data SHOULD NOT assume that any missing data has been
           implicitly deleted.

           TODO - Do we still want this flag, or would it be
           better to notify this event out of band?";
       }
     }

     augment "/sn:subscription-started/yp:update-trigger" {
       if-feature "yp:on-change";
       description
         "Allow a subscription started notification to signal a
          combined periodic and on-change subscription.";
       case periodic-and-on-change {
         uses periodic-and-on-change;
       }
     }

     augment "/sn:subscription-started" {
       description
         "Allow a subscription started notification to signal that it
          uses the common notification format.";
       uses common-notification-format;
     }

     augment "/sn:subscription-modified/yp:update-trigger" {
       if-feature "yp:on-change";
       description
         "Allow a subscription started notification to signal a
          combined periodic and on-change subscription.";
       case periodic-and-on-change {
         uses periodic-and-on-change;
       }
     }

     augment "/sn:subscription-modified" {
       description
         "Allow a subscription modified notification to signal that it
          uses the common notification format.";
       uses common-notification-format;
     }

     /*
      * DATA NODES
      */

     augment "/sn:subscriptions/sn:subscription/yp:update-trigger" {
       when 'yp:datastore';
       if-feature "yp:on-change";
       description
         "This augmentation adds objects to a subscription that are
          specific to a datastore subscription, i.e., a subscription to
          a stream of datastore node updates.";
       case periodic-and-on-change {
         uses periodic-and-on-change;
       }
     }

     augment "/sn:subscriptions/sn:subscription" {
       uses common-notification-format;
     }
   }
   <CODE ENDS>

                     Figure 1: YANG module ietf-yp-ext

3.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

4.  Security Considerations

   TODO.  New YANG models will be defined that need to document their
   security considerations, but otherwise the security considerations in
   YANG Push should be sufficient.  TODO Security

5.  IANA Considerations

   TODO - This document will need to register new YANG models with IANA.

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8641]  Clemm, A. and E. Voit, "Subscription to YANG Notifications
              for Datastore Updates", RFC 8641, DOI 10.17487/RFC8641,
              September 2019, <https://www.rfc-editor.org/rfc/rfc8641>.

6.2.  Informative References

   [I-D.ietf-nmop-network-anomaly-architecture]
              Graf, T., Du, W., and P. Francois, "An Architecture for a
              Network Anomaly Detection Framework", Work in Progress,
              Internet-Draft, draft-ietf-nmop-network-anomaly-
              architecture-01, 20 October 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-nmop-
              network-anomaly-architecture-01>.

   [I-D.ietf-nmop-yang-message-broker-integration]
              Graf, T. and A. Elhassany, "An Architecture for YANG-Push
              to Message Broker Integration", Work in Progress,
              Internet-Draft, draft-ietf-nmop-yang-message-broker-
              integration-05, 19 October 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-nmop-
              yang-message-broker-integration-05>.

Acknowledgments

   This is early work is based on discussions with various folk,
   particularly Thomas Graf, Holger Keller, Dan Voyer, Nils Warnke, and
   Alex Huang Feng; but also wider conversations that include: Benoit
   Claise, Pierre Francois, Paolo Lucente, Jean Quilbeuf, and others.

Author's Address

   Robert Wilton
   Cisco Systems
   Email: rwilton@cisco.com
